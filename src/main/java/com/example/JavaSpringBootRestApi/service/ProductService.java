package com.example.JavaSpringBootRestApi.service;

import com.example.JavaSpringBootRestApi.entity.Product;
import com.example.JavaSpringBootRestApi.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Service class for managin Product entities.
 */
@Service // marks the class as a service provider
public class ProductService {
  private final ProductRepository productRepository;

  @Autowired // dependency injection, no automatic dependency configuration if left out
  public ProductService(ProductRepository productRepository) {
    this.productRepository = productRepository;
  }

  /**
   * Saves a product to the database
   * 
   * @param product the entity to save
   * @return the persisted entity
   */
  public Product saveProduct(Product product) {
    // purpose of returning the product:
    // 1. gain access to autogenerated product fields
    // 2. chain method calls
    return productRepository.save(product);
  }

  /**
   * Get all products.
   * 
   * @return the list of entities
   */
  public List<Product> getAllProducts() {
    return productRepository.findAll();
  }

  /**
   * Get product by id
   * 
   * @param id the ID of the entity
   * @return the entity
   */
  public Optional<Product> getProductById(Long id) {
    return productRepository.findById(id);
  }

  /**
   * Updates a product
   * 
   * @param id             the ID of the entity
   * @param updatedProduct the updated entity
   * @return the updated entity
   */
  public Product updateProduct(Long id, Product updatedProduct) {
    Optional<Product> existingProduct = productRepository.findById(id);
    if (existingProduct.isPresent()) {
      Product product = existingProduct.get();
      product.setName(updatedProduct.getName());
      product.setPrice(updatedProduct.getPrice());
      product.setQuantity(updatedProduct.getQuantity());
      return productRepository.save(product);
    } else {
      throw new RuntimeException("Product not found with id: " + id);
    }
  }

  /**
   * Deletes a product by id
   * 
   * @param id the ID of the entity
   */
  public void deleteProduct(Long id) {
    productRepository.deleteById(id);
  }
}
